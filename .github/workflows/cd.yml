name: Continuous Deployment

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  publish:
    name: Publishing for ${{ matrix.job.os }}
    runs-on: ${{ matrix.job.os }}
    strategy:
      matrix:
        rust: [stable]
        job:
          - os: macos-latest
            os-name: macos
            target: x86_64-apple-darwin
            architecture: x86_64
            binary-postfix: ""
            use-cross: false
          - os: ubuntu-latest
            os-name: linux
            target: x86_64-unknown-linux-gnu
            architecture: x86_64
            binary-postfix: ""
            use-cross: false
          - os: windows-latest
            os-name: windows
            target: x86_64-pc-windows-msvc
            architecture: x86_64
            binary-postfix: ".exe"
            use-cross: false
          # Disabling below cross builds for now as they aren't compiling
          # - os: ubuntu-latest
          #   os-name: linux
          #   target: aarch64-unknown-linux-gnu
          #   architecture: arm64
          #   binary-postfix: ""
          #   use-cross: true
          # - os: ubuntu-latest
          #   os-name: linux
          #   target: i686-unknown-linux-gnu
          #   architecture: i686
          #   binary-postfix: ""
          #   use-cross: true

    steps:
      - name: Installing Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install dependencies
        shell: bash
        run: |
          if [[ ${{ matrix.job.os }} == ubuntu-latest ]]; then
              sudo apt update
              sudo apt-get install -y libdbus-1-dev
          fi
          if [[ ${{ matrix.job.target }} == aarch64-unknown-linux-gnu ]]; then
              sudo dpkg --add-architecture arm64
              sudo apt update
              sudo apt-get install -y binutils-aarch64-linux-gnu libdbus-1-dev:arm64
          fi
      - name: Cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          use-cross: ${{ matrix.job.use-cross }}
          toolchain: ${{ matrix.rust }}
          args: --release --target ${{ matrix.job.target }}

      - name: Packaging final binary
        shell: bash
        run: |
          cd target/${{ matrix.job.target }}/release

          ####### reduce binary size by removing debug symbols #######
          BINARY_NAME=sup${{ matrix.job.binary-postfix }}
          if [[ ${{ matrix.job.target }} == aarch64-unknown-linux-gnu ]]; then
            GCC_PREFIX="aarch64-linux-gnu-"
          else
            GCC_PREFIX=""
          fi
          "$GCC_PREFIX"strip $BINARY_NAME

          ########## create tar.gz ##########
          RELEASE_NAME=sup-${GITHUB_REF/refs\/tags\//}-${{ matrix.job.os-name }}-${{ matrix.job.architecture }}
          tar czvf $RELEASE_NAME.tar.gz $BINARY_NAME

          ########## create sha256 ##########
          if [[ ${{ runner.os }} == 'Windows' ]]; then
            certutil -hashfile $RELEASE_NAME.tar.gz sha256 | grep -E [A-Fa-f0-9]{64} > $RELEASE_NAME.sha256
          else
            shasum -a 256 $RELEASE_NAME.tar.gz > $RELEASE_NAME.sha256
          fi
      - name: Releasing assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            target/${{ matrix.job.target }}/release/sup-*.tar.gz
            target/${{ matrix.job.target }}/release/sup-*.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-cargo:
    name: Publishing to Cargo
    if: ${{ false }} # Disable for now
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: publish
          args: --token ${{ secrets.CARGO_API_KEY }} --allow-dirty
